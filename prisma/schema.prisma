// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "dataProxy"]
}

enum Mood {
  HAPPY
  SAD
  ANGRY
  ANXIOUS
  CONFUSED
  EXCITED
  RELAXED
  STRESSED
  TIRED
}

enum SexualityPronouns {
  MALE
  FEMALE
}

model Post {
  id         String @id @unique @default(cuid())
  authorId   String
  author     User   @relation("userPosts", fields: [authorId], references: [id], onDelete: SetNull)
  content    String
  mood       Mood?
  attachment Bytes?

  timestamp DateTime @default(now())

  upvote   User[]    @relation("userUpvote")
  downvote User[]    @relation("userDownvote")
  comment  Comment[] @relation("postComments")

  reports PostReport[]
}

model User {
  id             String             @id @unique @default(uuid())
  username       String?            @unique
  birthdate      DateTime?
  gender         SexualityPronouns?
  universityName String?
  university     University?        @relation(fields: [universityName], references: [name])
  registeredAt   DateTime           @default(now())

  // NextAuth
  accounts      Account[]
  sessions      Session[]
  email         String    @unique
  emailVerified DateTime?

  posts         Post[]    @relation("userPosts")
  postUpvotes   Post[]    @relation("userUpvote")
  postDownvotes Post[]    @relation("userDownvote")
  comments      Comment[] @relation("userPostComments")
  commentLoves  Comment[] @relation("commentLoves")

  // Notifications
  allowEmailNotification Boolean               @default(true)
  commentNotification    CommentNotification[] @relation("userCommentNotifications")

  postReports   PostReport[]
  commentReport CommentReport[]
}

model University {
  name String @id @unique

  students User[]
}

model Comment {
  id String @id @default(cuid())

  // All comments must have a parent post
  parentPostId String @map("postId")
  parentPost   Post   @relation("postComments", fields: [parentPostId], references: [id], onDelete: Cascade)
  authorId     String
  author       User   @relation("userPostComments", fields: [authorId], references: [id], onDelete: SetNull)

  content   String
  timestamp DateTime @default(now())
  lovedBy   User[]   @relation("commentLoves", references: [id])

  // If recursive comments
  parentCommentId  String?   @map("commentId")
  parentComment    Comment?  @relation("commentTree", fields: [parentCommentId], references: [id])
  childrenComments Comment[] @relation("commentTree")

  commentReport       CommentReport[]
  commentNotification CommentNotification[] @relation("commentNotification")
}

// ---

model CommentNotification {
  id String @id @default(cuid())

  recepientId String
  recepient   User   @relation("userCommentNotifications", fields: [recepientId], references: [id], onDelete: Cascade)

  commentId String
  comment   Comment @relation("commentNotification", fields: [commentId], references: [id], onDelete: Cascade)

  isRead    Boolean  @default(false)
  timestamp DateTime @default(now())

  content String
}

// ---

model PostReport {
  id String @id @default(cuid())

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  reporterId String
  reporter   User   @relation(fields: [reporterId], references: [id], onDelete: Cascade)
}

model CommentReport {
  id String @id @default(cuid())

  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  reporterId String
  reporter   User   @relation(fields: [reporterId], references: [id], onDelete: Cascade)
}

// --- NextAuth Below

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
